#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#include "bepo_bindings.h"

/* SETTINGS */
#define MACRO_WAIT 3 /* good 5 */
#define MACRO_TAP_DELAY 3 /* good 5 */

#define COMBO_TIMEOUT 15 /* max 20 */

#define HT_TAPPING_TERM 300
#define HT_QUICK_TAP 200
#define LT_TAPPING_TERM 250
#define STICKY_KEY_RELEASE_DELAY 2000 /* min 1000 */

/* LAYERS */
#define BASE 0
#define CAPL 1
#define TWEN 2
#define TWE2 3
#define TWEA 4
#define TWENAV 5
#define GAME 6
#define SYM 7
#define ACNT 8
#define NUM 9
#define NAV 10
#define FUNC 11

#define NOT_TWENTY BASE CAPL GAME SYM ACNT NUM NAV FUNC
#define TWENTY_LAYERS TWEN TWE2 TWEA TWENAV

&lt {
	tapping-term-ms = <LT_TAPPING_TERM>;
	flavor = "balanced";
};

&mt {
	tapping-term-ms = <120>;
};

&sk {
	release-after-ms = <STICKY_KEY_RELEASE_DELAY>;
	quick-release;
};

/ { 
	behaviors {
		#define HOLDTAP_HEADER(NAME) \
			NAME: ht_##NAME { \
				label = #NAME; \
				compatible = "zmk,behavior-hold-tap"; \
				#binding-cells = <2>; \
				tapping-term-ms = <HT_TAPPING_TERM>; \
				quick-tap-ms = <HT_QUICK_TAP>;
				
		#define HOLDTAP(NAME, FLAVOR, BINDINGS...) \
				HOLDTAP_HEADER(NAME) \
				flavor = #FLAVOR; \
				bindings = BINDINGS; \
			};
			
		#define HRMOD_POS(NAME, POSITIONS) \
				HOLDTAP_HEADER(NAME) \
				flavor = "tap-preferred"; \
				bindings = <&kp>, <&kp>; \
				hold-trigger-key-positions = <POSITIONS>; \
			};
			
		
		HOLDTAP(hm,  tap-preferred, <&kp>, <&kp>)
		HOLDTAP(lsk, balanced,      <&mo>, <&sk>)        // lsk: layer if held, one-shot kp if pressed
		HOLDTAP(lsl, balanced,      <&mo>, <&sl>)        // lsl: layer if held, one-shot layer if pressed
		
		HOLDTAP(hm_qu, tap-preferred,   <&kp>, <&m_Q_U_>)
		HOLDTAP(hm_aact, tap-preferred,   <&kp>, <&m_ACUT_A_>)
		HOLDTAP(hm_uact, tap-preferred,   <&kp>, <&m_ACUT_U_>)
		HOLDTAP(hm_iact, tap-preferred,   <&kp>, <&m_ACUT_I_>)
		
		HOLDTAP(osstwe2, balanced,      <&mo>, <&m_twe2_osshift>)        // s20: layer if held, one-shot shift + alpha2 if pressed
		
		HRMOD_POS(hml, 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33)
		HRMOD_POS(hmr, 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31)
	};

	macros {
		#define MACRO(NAME, BINDINGS...) \
			ZMK_MACRO(m_##NAME, \
				tap-ms = <MACRO_TAP_DELAY>; \
				wait-ms = <MACRO_WAIT>; \
				bindings = BINDINGS; \
				)
				
		#define MACRO_SIMPLE(FIRST, SECOND) \
			MACRO(FIRST##SECOND, <&macro_tap &kp FIRST &kp SECOND>)
				
		#define MACRO_SIMPLE_OLD(FIRST, SECOND) \
			ZMK_MACRO(m_##FIRST##SECOND, \
				tap-ms = <MACRO_TAP_DELAY>; \
				wait-ms = <MACRO_WAIT>; \
				bindings = <&macro_tap &kp FIRST &kp SECOND>; \
				)
	
		// define macros like m_ACUT_A_ for accents layer
		MACRO_SIMPLE(ACUT_, A_)
		MACRO_SIMPLE(ACUT_, E_)
		MACRO_SIMPLE(ACUT_, I_)
		MACRO_SIMPLE(ACUT_, O_)
		MACRO_SIMPLE(ACUT_, U_)
		MACRO_SIMPLE(CFLX_, A_)
		MACRO_SIMPLE(CFLX_, E_)
		MACRO_SIMPLE(CFLX_, I_)
		MACRO_SIMPLE(CFLX_, O_)
		MACRO_SIMPLE(CFLX_, U_)
		MACRO_SIMPLE(GRAV_, E_)
		MACRO_SIMPLE(GRAV_, O_)
		MACRO_SIMPLE(GRAV_, U_)
		MACRO_SIMPLE(TILD_, A_)
		MACRO_SIMPLE(TILD_, O_)
		MACRO_SIMPLE(TILD_, N_)
		MACRO_SIMPLE(TRMA_, I_)
		MACRO_SIMPLE(Q_, U_)
		MACRO_SIMPLE(B_, J_)
		MACRO_SIMPLE(F_, U_)
		MACRO_SIMPLE(U_, F_)
		
		MACRO(ae, <&macro_tap &kp TILD_ &kp A_ &kp E_>)
		MACRO(ao, <&macro_tap &kp TILD_ &kp A_ &kp O_>)
		MACRO(oe, <&macro_tap &kp TILD_ &kp O_ &kp E_>)
		
		MACRO(shift_qu, <&macro_press &kp LSHFT>, <&macro_tap &kp Q_ &kp U_>, <&macro_release &kp LSHFT>)
		MACRO(shift_ae, <&macro_tap &kp TILD_>, <&macro_press &kp LSHFT>, <&macro_tap &kp A_ &kp E_>, <&macro_release &kp LSHFT>)
		MACRO(shift_ao, <&macro_tap &kp TILD_>, <&macro_press &kp LSHFT>, <&macro_tap &kp A_ &kp O_>, <&macro_release &kp LSHFT>)
		MACRO(shift_oe, <&macro_tap &kp TILD_>, <&macro_press &kp LSHFT>, <&macro_tap &kp O_ &kp E_>, <&macro_release &kp LSHFT>)
		
		// MACRO(spc_capl, <&macro_tap &kp SPACE &tog CAPL>) // space then toggle caps layer
		MACRO(twe2_osshift, <&macro_tap &sk LSHFT &sl TWE2>)
	};
			  
	combos {
		compatible = "zmk,combos";
		
		#define COMBO_HEADER(NAME, POSITIONS) \
			combo_##NAME { \
				key-positions = <POSITIONS>; \
				timeout-ms = <COMBO_TIMEOUT>; \
		
		#define COMBO(BINDINGS, POSITIONS, NAME) \
			COMBO_HEADER(NAME, POSITIONS) \
				bindings = <BINDINGS>; \
			};
		
		#define COMBO_LAYER(LAYERS, BINDINGS, POSITIONS, NAME) \
			COMBO_HEADER(NAME, POSITIONS) \
				bindings = <BINDINGS>; \
				layers = <LAYERS>; \
			};
		
		#define COMBO_KP(KEY, SUFFIX, POSITIONS) \
			COMBO_HEADER(KEY##SUFFIX, POSITIONS) \
				bindings = <&kp KEY>; \
			};
			
		#define COMBO_KP_LAYER(KEY, SUFFIX, POSITIONS, LAYERS) \
			COMBO_HEADER(KEY##SUFFIX, POSITIONS) \
				bindings = <&kp KEY>; \
				layers = <LAYERS>; \
			};
		
		#define COMBO_MACRO(MACRO, POSITIONS) \
			COMBO_HEADER(MACRO, POSITIONS) \
				bindings = <&m_##MACRO>; \
			};
		
		#define COMBO_MACRO_LAYER(MACRO, SUFFIX, POSITIONS, LAYERS) \
			COMBO_HEADER(MACRO##SUFFIX, POSITIONS) \
				bindings = <&m_##MACRO>; \
				layers = <LAYERS>; \
			};
		
			
	/*
	    0   1   2   3      4 | 5      6   7   8   9
	    10  11  12  13    14 | 15    16  17  18  19
	    20  21  22  23    24 | 25    26  27  28  29
							 |
	                   30 31 | 32 33
	*/
	
		COMBO_KP(TAB,, 12 13)
		COMBO_KP(ENTER,, 16 17)
		COMBO_KP(SPACE,l, 11 12 13)
		COMBO_KP(SPACE,r, 16 17 18)
		
		COMBO_KP(BSPC,, 11 12)
		COMBO_KP(DEL,, 21 22)
		COMBO(&kp LC(BSPC), 17 18, gslqgrnqsl)
		COMBO(&kp LC(DEL), 27 28, rgsrnqsj)
		
		COMBO(&kp LC(Z_), 20 21, cdldljltsr)
				
		COMBO_LAYER(NOT_TWENTY,    &lsk     FUNC LSHIFT, 30 31, dljsdqsrt)
		COMBO_LAYER(TWENTY_LAYERS, &osstwe2 FUNC 0,      30 31, eiueiueiu)
		COMBO(&sk RSHIFT,       32 33, sqljqrjqsl)
		
		COMBO_KP_LAYER(ESC,, 	  10 11, NOT_TWENTY)
		COMBO_KP_LAYER(ESC,twen,  0  11, TWENTY_LAYERS)
		COMBO_KP_LAYER(CAPS,,	  15 19, NOT_TWENTY)
		COMBO_KP_LAYER(CAPS,twen, 15 9,  TWENTY_LAYERS)
		
		COMBO_MACRO_LAYER(Q_U_,, 26 27, BASE)
		COMBO_MACRO_LAYER(ae,, 13 30, BASE)
		COMBO_MACRO_LAYER(ao,, 13 11, BASE)
		COMBO_MACRO_LAYER(oe,, 11 30, BASE)
		
		COMBO_MACRO_LAYER(shift_qu,, 26 27, CAPL)
		COMBO_MACRO_LAYER(shift_ae,, 13 30, CAPL)
		COMBO_MACRO_LAYER(shift_ao,, 13 11, CAPL)
		COMBO_MACRO_LAYER(shift_oe,, 11 30, CAPL)
		
		// 20-key combos
		COMBO_LAYER(TWENAV, &kp LC(HOME), 26 27, rstrstrl)
		COMBO_LAYER(TWENAV, &kp LC(END),  28 29, grjqljg)
		COMBO_LAYER(TWENAV, &kp PG_DN,  17 27, ldnrshld)
		COMBO_LAYER(TWENAV, &kp PG_UP,  18 28, njlzdnr)
		
		COMBO_MACRO_LAYER(ae,twen, 11 13, TWEN)
		COMBO_MACRO_LAYER(ao,twen, 11 23, TWEN)
		COMBO_MACRO_LAYER(oe,twen, 13 23, TWEN)
		COMBO_MACRO_LAYER(U_F_,twen, 0 21, TWEN)
		COMBO_MACRO_LAYER(F_U_,twen, 10 21, TWEN)
		
		
		combo_reset_left {
			bindings = <&reset>;
			key-positions = <0 4>;
			layers = <FUNC>;
			timeout-ms = <COMBO_TIMEOUT>;
		};
		
		combo_bootloader {
			bindings = <&bootloader>;
			key-positions = <20 24>;
			layers = <FUNC>;
			timeout-ms = <COMBO_TIMEOUT>;
		};
		
		combo_caps_layer {
			bindings = <&tog CAPL>;
			key-positions = <10 13>;
			layers = <BASE CAPL>;
			timeout-ms = <COMBO_TIMEOUT>;
		};
		
		combo_game_layer {
			bindings = <&tog GAME>;
			key-positions = <0 1 2>;
			layers = <FUNC>;
			timeout-ms = <COMBO_TIMEOUT>;
		};
		
		combo_twenty {
			bindings = <&tog TWEN>;
			key-positions = <15 25>;
			layers = <FUNC>;
			timeout-ms = <COMBO_TIMEOUT>;
		};
	};

	keymap {
		compatible = "zmk,keymap";
		
		#define HMLS  &hml LSHIFT
		#define HMRS  &hmr RSHIFT
		#define HMLC  &hm LCTRL
		#define HMRC  &hm RCTRL
		#define HMLA  &hm LALT
		#define HMRA  &hm RALT
		#define HMLG  &hm LGUI
		#define HMRG  &hm RGUI
		
		#define HMLG_QU		&hm_qu LGUI 0
		#define HMRA_IACT	&hm_iact RALT 0
		#define HMLA_AACT	&hm_aact LALT 0
		#define HMLG_UACT	&hm_uact LGUI 0
		
		#define EXCL_QMRK	&mt EXCL_ QMRK_
		
		#define MTPAR  &mt RPAR_ LPAR_
		/*#define MTCRL  &mt RCRL_ LCRL_
		#define MTBRK  &mt RBRK_ LBRK_
		#define MTGLM  &mt RGLM_ LGLM_*/
		#define MTGLT  &mt GT_   LT_
		
		/*#define MTDASH  &mtslow NDSH_ MDSH_*/
		#define MTCASH  &mt EURO_ DLLR_
		
		#define THLH1	&lt NUM E_
		#define THLH1S	&lt NUM LS(E_)
		#define THLH2	&lsl SYM SYM
		#define THRH2	&lsl ACNT ACNT
		#define THRH1	&lt NAV SPACE
		
		#define TH20LH1	&lsl TWE2 TWE2
		#define TH20LH2	&lsl NUM SYM
		#define TH20RH1	&lt TWENAV SPACE
		#define TH20RH2	&lsl TWEA TWEA
		
		#define ___ &none
		
		base_layer {
			bindings = <
				&kp  Q_		HMRA MIN_	&kp  Y_		&kp DOT_	EXCL_QMRK			&kp K_		&kp  C_		&kp  H_		&kp  W_		&kp  J_
				HMRG U_		HMLA O_		HMLC I_		HMLS A_		&kp F_				&kp G_		HMRS T_		HMRC R_		HMRA S_		HMRG N_
				&kp  Z_		HMLC EACT_	&kp  P_		&kp COMM_	&kp X_				&kp V_		&kp  D_		&kp  M_		&kp  L_		&kp  B_
													THLH1		THLH2				THRH2		THRH1
			>;
		};
		
		caps_layer {
			bindings = <
				&kp  LS(Q_)		&trans			&kp  LS(Y_)	 &kp DOT_	   &trans				&kp LS(K_)		&kp  LS(C_)		&kp  LS(H_)		&kp  LS(W_)		&kp  LS(J_)
				HMRG LS(U_)		HMLA LS(O_)		HMLC LS(I_)	 HMLS LS(A_)   &kp LS(F_)			&kp LS(G_)		HMRS LS(T_)		HMRC LS(R_)		HMRA LS(S_)		HMRG LS(N_)
				&kp  LS(Z_)		HMLC LS(EACT_)	&kp  LS(P_)	 &trans		   &kp LS(X_)			&kp LS(V_)		&kp  LS(D_)		&kp  LS(M_)		&kp  LS(L_)		&kp  LS(B_)
														     THLH1S	  	   THLH2				THRH2			THRH1
			>;
		};
		
		
		
		
		
		twenty_layer {
			bindings = <
				HMLG U_		___ 		___ 		___ 			___ ___ 		___ 		___ 		___			HMRG R_
				HMRA F_		HMLA A_		HMLC N_		HMLS E_			___	___			HMRS S_		HMRC T_		HMRA I_		&kp H_
				___		 	HMLC COMM_	&kp  L_		&kp  O_			___	___		 	&kp  M_		&kp  D_		&kp  P_		___
														TH20LH1	TH20LH2	TH20RH2	TH20RH1
			>;
		};
		
		twenty_layer_two {
			bindings = <
				HMLG_QU		___ 		___ 		___ 			___ ___ 		___ 		___ 		___ 		HMRG APST_
				HMRA MIN_	HMLA K_		HMLC V_		HMLS EACT_		___	___			HMRS C_		HMRC G_		HMRA Y_	&kp X_
				___			HMLC DOT_	&kp  J_		&kp  Q_	  &tog TWEN ___			&kp  W_		&kp  B_		&kp  Z_		___
														&trans	 &trans	&trans	&trans
			>;
		};
		
		twenty_layer_accents {
			bindings = <
				HMLG_UACT	___ 		___ 		___ 			___ ___ 		___ 		___ 		___ 		MTCASH
				&kp LPAR_	HMLA_AACT	HMLC CFLX_	HMLS TRMA_		___	___			HMRS CCED_	HMRC QUOT_	HMRA_IACT	EXCL_QMRK
				___			&kp RPAR_	&kp GRAV_	&m_ACUT_O_		___	___			&kp LGLM_	&kp  RGLM_	&kp TILD_	___
														&trans	 &trans	&trans	&trans
			>;
		};
		
		twenty_layer_nav {
			bindings = <
				HMLG INSERT	 ___		___			___				___	___			___				___			___			&kp LC(RIGHT)
				&kp LC(Z_)	 HMLA PSCRN	HMLC PSBRK	HMLS C_PP		___	___			&kp LC(LEFT)	&kp DOWN	&kp UP		&kp END
				___			 &kp LC(X_)	&kp LC(C_)	&kp LC(V_)		___	___			&kp HOME		&kp LEFT	&kp RIGHT	___
														&kp ULIN_	&trans	&trans		&trans
			>;
		};
		
		
		
		
		
		game_layer {
			bindings = <
				&kp ESC		&kp  F_		&kp  W_		&kp  E_		&kp T_				&kp Y_		&kp  U_		&kp  I_		&kp  O_		&kp  P_
				&kp LSHIFT	&kp  A_		&kp  S_		&kp  D_		&kp R_				&kp H_		&kp  J_		&kp  K_		&kp  L_		&kp  N_
				&kp LCTRL	&kp  Z_		&kp  X_		&kp  C_		&kp V_				&kp N_		&kp  M_		&kp  COMM_	&kp  DOT_	&kp  BSPC
													&kp SPACE	&kp TAB				&kp LALT	&kp SPACE
			>;
		};
		
		sym_layer {
			bindings = <
				___			&kp AT_		&kp AMPR_	&kp OE_		&kp AE_				___			MTCASH		&kp HASH_	&kp PCNT_	&kp PIPE_
				HMRG LCRL_	HMLA RCRL_	HMLC LPAR_	HMLS RPAR_	&kp MDSH_			___			HMRS LBRK_	HMRC RBRK_	HMLA MDSH_	HMRG NDSH_
				&kp NDSH_	&kp MDSH_	&kp LGLM_	&kp RGLM_	___					___			&kp LT_		&kp GT_		&kp EQUL_	___
													THLH1		&trans				&trans		&trans
			>;
		};
		
		accent_layer {
			bindings = <
				&m_CFLX_U_	&m_CFLX_O_	&m_CFLX_I_	&m_CFLX_A_	___					___			&kp CCED_	&kp APST_	&kp QUOT_	&m_B_J_
				&m_ACUT_U_	&m_ACUT_O_	&m_ACUT_I_	&m_ACUT_A_	&m_TILD_A_			&kp ACUT_	&kp MIN_	&kp CFLX_	&kp GRAV_	&m_TILD_N_
				&m_GRAV_U_	&m_TILD_O_	&m_TRMA_I_	&kp AGRV_	___					___			&kp TRMA_	&kp CRAT_	&kp SZET_	&kp TILD_
													&m_CFLX_E_	&m_GRAV_E_			&trans		&trans
			>;
		};
		
		num_layer {
			bindings = <
				___			&kp N7_		&kp N8_		&kp N9_		___					___			MTCASH		&kp HASH_	&kp PCNT_	&kp PIPE_
				&kp N0_		&kp N1_		&kp N2_		&kp	N3_		&kp DOT_			___			HMRS PLUS_	HMRC MIN_	HMLA STAR_	HMRG FSLA_
				___			&kp N4_		&kp N5_		&kp	N6_		&kp COMM_			___			&kp LT_		&kp GT_		&kp EQUL_	&kp BSLA_
													&trans		&trans				&kp ULIN_	&trans
			>;
		};
		
		nav_layer {
			bindings = <
				&kp INSERT	&sk RALT	&kp PSCRN	&kp PSBRK	___					___			&kp LC(HOME)	&kp PG_DN	&kp PG_UP	&kp LC(END)
				&sk LGUI	&sk LALT	&sk LCTRL	&sk LSHIFT	___					___			&kp LC(LEFT)	&kp DOWN	&kp UP		&kp LC(RIGHT)
				&kp LC(Z_)	&kp LC(X_)	&kp LC(C_)	&kp LC(V_)	___					___			&kp HOME		&kp LEFT	&kp RIGHT	&kp END
													&kp ULIN_	&trans				&trans		&trans
			>;
		};
		
		func_layer {
			bindings = <
				&bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3			&reset        &kp F7  &kp F8  &kp F9  &kp F10
				HMLG C_BRI_UP HMLA C_VOL_DN HMLC C_VOL_UP HMLS C_MUTE   &kp LSLCK				&out OUT_BLE  &kp F1  &kp F2  &kp F3  &kp F11
				&kp C_BRI_DN  &kp C_PREV    &kp C_NEXT    &kp C_PP      &kp LNLCK				&out OUT_USB  &kp F4  &kp F5  &kp F6  &kp F12
													      &trans		&trans					&trans		  &trans
			>;
		};
		/* FOR DEBUGGING:
			bindings = <
				___ ___ ___ ___ ___ ___ ___ ___ ___ ___
				___ ___ ___ ___ ___ ___ ___ ___ ___ ___
				___ ___ ___ ___ ___ ___ ___ ___ ___ ___
				___ ___ ___ ___
			>;
		*/
	};
};
