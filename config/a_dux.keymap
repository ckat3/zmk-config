#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/* SETTINGS */
#define MACRO_DELAY 16 /* max 30 */
#define COMBO_DELAY 15 /* min 10 */
#define HT_TAPPING_TERM 300
#define HT_QUICK_TAP 200
#define LT_TAPPING_TERM 250
#define STICKY_KEY_RELEASE_DELAY 2000 /* min 1000 */

/* BINDINGS FOR BÉPO */
#define B_		Q
#define EACT_	W
#define P_		E
#define O_		R
#define EGRV_	T
#define CFLX_	Y
#define V_		U
#define D_		I
#define L_		O
#define J_		P
#define Z_		LBKT
#define W_		RBKT

#define A_		A
#define U_		S
#define I_		D
#define E_		F
#define COMM_	G
#define C_		H
#define T_		J
#define S_		K
#define R_		L
#define N_		SEMI
#define M_		APOSTROPHE
#define CCED_	BACKSLASH

#define AGRV_	Z
#define Y_		X
#define X_		C
#define DOT_	V
#define K_		B
#define APSC_	N /* inverted comma */
#define APST_	RA(COMM_)
#define Q_		M
#define G_		COMMA
#define H_		DOT
#define F_		SLASH

#define EXCL_	LS(CFLX_)
#define SEMI_	LS(COMM_)
#define COLN_	LS(DOT_)
#define QMRK_	LS(APSC_)

#define ACUT_	RA(EACT_)
#define GRAV_	RA(EGRV_)
#define TILD_	RA(N_)
#define AMPR_	RA(P_)
#define OE_		RA(O_)

#define AE_		RA(A_)
#define TRMA_	RA(I_)
#define EURO_	RA(E_)
#define BSLA_	RA(AGRV_)
#define LCRL_	RA(Y_)
#define RCRL_	RA(X_)
#define ULIN_	RA(SPACE)

#define DLLR_	GRAVE
#define HASH_	LS(DLLR_)
#define QUOT_	N1
#define LGLM_	N2
#define RGLM_	N3
#define LT_		RA(LGLM_)
#define GT_		RA(RGLM_)
#define LPAR_	N4
#define RPAR_	N5
#define LBRK_	RA(LPAR_)
#define RBRK_	RA(RPAR_)
#define AT_		N6
#define PLUS_	N7
#define MIN_	N8
#define FSLA_	N9
#define STAR_	N0
#define EQUL_	MINUS
#define PCNT_	EQUAL

#define PIPE_	RA(B_)

#define CRAT_ RA(N6_)
#define TLDL_ RA(K_) /* loose tilde */


#define MDSH_  RA(N8)
#define NDSH_  RA(N1)

#define NBSP_  LS(SPACE)

#define N0_  LS(N0)
#define N1_  LS(N1)
#define N2_  LS(N2)
#define N3_  LS(N3)
#define N4_  LS(N4)
#define N5_  LS(N5)
#define N6_  LS(N6)
#define N7_  LS(N7)
#define N8_  LS(N8)
#define N9_  LS(N9)
		
#define PSBRK PAUSE_BREAK

&lt {
	tapping-term-ms = <LT_TAPPING_TERM>;
	flavor = "balanced";
};

&mt {
	tapping-term-ms = <120>;
};

&sk {
	release-after-ms = <STICKY_KEY_RELEASE_DELAY>;
	quick-release;
};

/ { 
	behaviors {
		#define HOLDTAP_HEADER(NAME) \
			NAME: ht_##NAME { \
				label = #NAME; \
				compatible = "zmk,behavior-hold-tap"; \
				#binding-cells = <2>; \
				tapping-term-ms = <HT_TAPPING_TERM>; \
				quick-tap-ms = <HT_QUICK_TAP>;
				
		#define HOLDTAP(NAME, FLAVOR, BINDINGS...) \
				HOLDTAP_HEADER(NAME) \
				flavor = #FLAVOR; \
				bindings = BINDINGS; \
			};
			
		#define HRMOD_POS(NAME, POSITIONS) \
				HOLDTAP_HEADER(NAME) \
				flavor = "balanced"; \
				bindings = <&kp>, <&kp>; \
				hold-trigger-key-positions = <POSITIONS>; \
			};
			
		HOLDTAP(hm,       tap-preferred, <&kp>, <&kp>)
		HOLDTAP(lhs,      balanced,      <&mo>, <&tog>)       // lhs: layer if held, toggle if pressed
		HOLDTAP(lsk,      balanced,      <&mo>, <&sk>)        // lsk: layer if held, one-shot kp if pressed
		HOLDTAP(lsl,      balanced,      <&mo>, <&sl>)        // lsk: layer if held, one-shot layer if pressed
		HOLDTAP(lecflx,   balanced,      <&mo>, <&m_CFLX_E_>)
		HOLDTAP(dotcomma, balanced,      <&m_dot_ns>, <&m_com_ns>)
		
		HRMOD_POS(hml, 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33)
		HRMOD_POS(hmr, 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31)
	};

	
	macros {		
		#define MACRO(FIRST, SECOND) \
			ZMK_MACRO(m_##FIRST##SECOND, \
				tap-ms = <MACRO_DELAY>; \
				bindings = <&macro_tap &kp FIRST &kp SECOND>; \
				)
		
		#define MACRO_(NAME, BINDINGS) \
			ZMK_MACRO(m_##NAME, \
				tap-ms = <MACRO_DELAY>; \
				bindings = <BINDINGS>; \
				)
		
		#define MACRO_DOUBLE(FIRST, SECOND) \
			ZMK_MACRO(dbl_##FIRST, \
				tap-ms = <MACRO_DELAY>; \
				bindings = <&macro_tap &kp FIRST &kp SECOND &kp LEFT>; \
				)
	
		MACRO(ACUT_, A_)
		MACRO(ACUT_, E_)
		MACRO(ACUT_, I_)
		MACRO(ACUT_, O_)
		MACRO(ACUT_, U_)
		MACRO(CFLX_, A_)
		MACRO(CFLX_, E_)
		MACRO(CFLX_, I_)
		MACRO(CFLX_, O_)
		MACRO(CFLX_, U_)
		MACRO(GRAV_, E_)
		MACRO(GRAV_, O_)
		MACRO(GRAV_, U_)
		MACRO(TILD_, A_)
		MACRO(TILD_, O_)
		MACRO(TILD_, N_)
		MACRO(TRMA_, I_)
		MACRO(COMM_, SPACE)
		
		MACRO_(qu,     &macro_tap &kp Q_ &kp U_)
		MACRO_(ae,     &macro_tap &kp TILD_ &kp A_ &kp E_)
		MACRO_(ao,     &macro_tap &kp TILD_ &kp A_ &kp O_)
		MACRO_(oe,     &macro_tap &kp TILD_ &kp O_ &kp E_)
		MACRO_(ion,    &macro_tap &kp I_ &kp O_ &kp N_)
		MACRO_(ment,   &macro_tap &kp M_ &kp E_ &kp N_ &kp T_)
		MACRO_(dot_ns, &macro_tap &kp DOT_ &kp SPACE &sk LSHIFT)
		MACRO_(com_ns, &macro_tap &kp COMM_ &kp SPACE)
		
		MACRO_(surpar,  &macro_tap &kp LC(X_) &kp LPAR_ &kp LC(V_) &kp RPAR_)
		MACRO_(surbrk,  &macro_tap &kp LC(X_) &kp LBRK_ &kp LC(V_) &kp RBRK_)
		MACRO_(surcrl,  &macro_tap &kp LC(X_) &kp LCRL_ &kp LC(V_) &kp RCRL_)
		MACRO_(surlt,   &macro_tap &kp LC(X_) &kp LT_   &kp LC(V_) &kp GT_)
		MACRO_(surglm,  &macro_tap &kp LC(X_) &kp LGLM_ &kp LC(V_) &kp RGLM_)
		MACRO_(surquot, &macro_tap &kp LC(X_) &kp QUOT_ &kp LC(V_) &kp QUOT_)
				
		MACRO_DOUBLE(LPAR_, RPAR_)
		MACRO_DOUBLE(LBRK_, RBRK_)
		MACRO_DOUBLE(LCRL_, RCRL_)
		MACRO_DOUBLE(LT_,   GT_)
		MACRO_DOUBLE(LGLM_, RGLM_)
		MACRO_DOUBLE(APST_, APST_)
		MACRO_DOUBLE(QUOT_, QUOT_)
	};

	/*
	  ╭──────────────────────╮ ╭───────────────────────╮
	  │  0   1   2   3     4 │ │  5     6   7   8   9 │
	  │ 10  11  12  13    14 │ │ 15    16  17  18  19 │
	  │ 20  21  22  23    24 │ │ 25    26  27  28  29 │
	  ╰───────────╮ 30    31 │ │ 32    33 ╭───────────╯
				  ╰──────────╯ ╰──────────╯			*/
			  
	combos {
		compatible = "zmk,combos";
		
		#define COMBO_HEADER(NAME, POSITIONS) \
			combo_##NAME { \
				key-positions = <POSITIONS>; \
				timeout-ms = <COMBO_DELAY>; \
		
		#define COMBO(NAME, BINDINGS, POSITIONS, SUFFIX) \
			COMBO_HEADER(NAME, POSITIONS) \
				bindings = <BINDINGS>; \
			};
		
		#define COMBO_KP(KEY, POSITIONS, SUFFIX) \
			COMBO_HEADER(KEY##SUFFIX, POSITIONS) \
				bindings = <&kp KEY>; \
			};
			
		#define COMBO_LAYER(KEY, POSITIONS, LAYERS) \
			COMBO_HEADER(KEY, POSITIONS) \
				bindings = <&kp KEY>; \
				layers = <LAYERS>; \
			};
		
		#define COMBO_MACRO(MACRO, POSITIONS) \
			COMBO_HEADER(MACRO, POSITIONS) \
				bindings = <&m_##MACRO>; \
			};
			
		COMBO_KP(TAB,   12 13,)
		COMBO_KP(ENTER, 16 17,)
		COMBO_KP(BSPC,  11 12,)
		COMBO_KP(SPACE, 11 12 13,)
		COMBO_KP(SPACE, 16 17 18,_)
		COMBO_KP(DEL,   21 22,)
		COMBO_KP(DEL,   27 28,_)
		COMBO_KP(ESC,   10 11 12 13,)
		COMBO_KP(ESC,   22 23,_)
		COMBO_KP(CAPS,  23 24,)
		COMBO_KP(CAPS,  25 26,_)
		COMBO_KP(DOT_,  10 11,)
		COMBO_KP(PSBRK, 20 21 22 23,)
		
		COMBO_MACRO(qu,   26 27)
		COMBO_MACRO(ae,   13 30)
		COMBO_MACRO(ao,   13 11)
		COMBO_MACRO(oe,   11 30)
		COMBO_MACRO(ion,  12 11 19)
		COMBO_MACRO(ment, 27 19 16)
		
		combo_ctrl_bspc {
			bindings = <&kp LC(BSPC)>;
			key-positions = <17 18>;
			timeout-ms = <COMBO_DELAY>;
		};
		
		combo_ctrl_z {
			bindings = <&kp LC(Z_)>;
			key-positions = <20 21>;
			timeout-ms = <COMBO_DELAY>;
		};
		
		combo_func_layer {
			bindings = <&mo FUNC>;
			key-positions = <30 31>;
			layers = <BASE>;
			timeout-ms = <COMBO_DELAY>;
		};
		
		combo_reset_left {
			bindings = <&reset>;
			key-positions = <0 4>;
			layers = <FUNC>;
			timeout-ms = <COMBO_DELAY>;
		};
		
		combo_bootloader {
			bindings = <&bootloader>;
			key-positions = <20 24>;
			layers = <FUNC>;
			timeout-ms = <COMBO_DELAY>;
		};
	};

	keymap {
		compatible = "zmk,keymap";
		
		#define BASE 0
		#define SYM  1
		#define ACNT 2
		#define NUM  3
		#define NAV  4
		#define FUNC 5
		
		#define HMLS  &hml LSHIFT
		#define HMRS  &hmr RSHIFT
		#define HMLC  &hm LCTRL
		#define HMRC  &hm RCTRL
		#define HMLA  &hm LALT
		#define HMRA  &hm RALT
		#define HMLG  &hm LGUI
		#define HMRG  &hm RGUI
		
		#define DOT_COMMS	&dotcomma 0 0
		#define COMMA_DOT	&mt COMM_ DOT_
		#define DOT_COMMA	&mt DOT_ COMM_
		#define COLON_SEMI	&mt COLN_ SEMI_
		#define EXCL_QMRK	&mt EXCL_ QMRK_
		
		#define MTPAR  &mt RPAR_ LPAR_
		#define MTCRL  &mt RCRL_ LCRL_
		#define MTBRK  &mt RBRK_ LBRK_
		#define MTGLM  &mt RGLM_ LGLM_
		#define MTGLT  &mt GT_   LT_
		
		#define THUMB1	&lt SYM E_
		#define THUMB2	&lsk NUM LSHIFT
		#define THUMB3	&lsl ACNT ACNT
		#define THUMB4	&lt NAV SPACE
		
		base_layer {
			bindings = <
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none
			>;
		};
		
		sym_layer {
			bindings = <
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none
			>;
		};
		
		accent_layer {
			bindings = <
				&m_CFLX_U_	&m_CFLX_O_	&m_CFLX_I_	&m_CFLX_A_	&none				&none		&kp CCED_	&kp APST_	&none		&none
				&m_ACUT_U_	&m_ACUT_O_	&m_ACUT_I_	&m_ACUT_A_	&m_TILD_A			&kp APST_	&kp ACUT_	&kp CFLX_	&kp GRAV_	&m_TILD_N_
				&m_GRAV_U_	&m_TILD_O_	&m_TRMA_I_	&kp AGRV__	&none				&none		&kp TRMA_	&kp CRAT_	&none		&kp TILD_
													&m_CFLX_E_	&m_GRAV_E_			&trans		&trans
			>;
		};
		
		num_layer {
			bindings = <
				&kp EQUL_	&kp N9_		&kp N8_		&kp N7_		&none				&none		&kp PCNT_	&kp HASH_	&kp DLLR_	&kp EURO_
				&kp N0_		&kp N3_		&kp N2_		&kp	N1_		COMMA_DOT			&none		HMRS PLUS_	HMRC MIN_	HMLA STAR_	HMRG FSLA_
				&none		&kp N6_		&kp N5_		&kp	N4_		&none				&none		&kp EQUL_	MTPAR		MTGLT		&kp BSLA_
													&tog NUM	&trans				&kp ULIN_	&trans
			>;
		};
		
		nav_layer {
			bindings = <
				&kp INSERT	&sk RALT	&kp PSCRN	&kp PSBRK	&none				&none		&kp PG_UP		&kp HOME	&kp END		&kp PG_DN	
				&sk LGUI	&sk LALT	&sk LCTRL	&sk LSHIFT	&none				&none		&kp LC(LEFT)	&kp DOWN	&kp UP		&kp LC(RIGHT)
				&kp LC(Z_)	&kp LC(X_)	&kp LC(C_)	&kp LC(V_)	&none				&none		&kp LC(BSPC)	&kp LEFT	&kp RIGHT	&kp LC(DEL)
													&kp ULIN_	&trans				&trans		&trans
			>;
		};
		
		func_layer {
			bindings = <
				&bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3			&reset        &kp F7  &kp F8  &kp F9  &kp F12
				HMLG C_BRI_UP HMLA C_VOL_DN HMLC C_VOL_UP HMLS C_MUTE   &kp LSLCK				&out OUT_BLE  &kp F1  &kp F2  &kp F3  &kp F11
				&kp C_BRI_DN  &kp C_PREV    &kp C_NEXT    &kp C_PP      &kp LNLCK				&out OUT_USB  &kp F4  &kp F5  &kp F6  &kp F10
													      &trans		&trans					&trans		  &trans
			>;
		};
		/*
		none_layer {
			bindings = <
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none
			>;
		};
		*/
	};
};	
