#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define SYM  1
#define SDBL 2
#define ACNT 3
#define NUM  4
#define NAV  5
#define FUNC 6

#define B_		Q
#define EACT_	W
#define P_		E
#define O_		R
#define EGRV_	T
#define CRAT_	Y
#define V_		U
#define D_		I
#define L_		O
#define J_		P
#define Z_		LBKT
#define W_		RBKT

#define A_		A
#define U_		S
#define I_		D
#define E_		F
#define COMM_	G
#define C_		H
#define T_		J
#define S_		K
#define R_		L
#define N_		SEMI
#define M_		APOSTROPHE
#define CCED_	BACKSLASH

#define AGRV_	Z
#define Y_		X
#define X_		C
#define DOT_	V
#define K_		B
#define APSC_	N /* inverted comma */
#define APST_	RA(COMM_)
#define Q_		M
#define G_		COMMA
#define H_		DOT
#define F_		SLASH

#define EXCL_	LS(CRAT_)
#define SEMI_	LS(COMM_)
#define COLN_	LS(DOT_)
#define QMRK_	LS(APSC_)

#define ACUT_	RA(EACT_)
#define GRAV_	RA(EGRV_)
#define TILD_	RA(N_)
#define AMPR_	RA(P_)
#define OE_		RA(O_)

#define AE_		RA(A_)
#define TRMA_	RA(I_)
#define EURO_	RA(E_)
#define BSLA_	RA(AGRV_)
#define LCRL_	RA(Y_)
#define RCRL_	RA(X_)
#define ULIN_	RA(SPACE)

#define DLLR_	GRAVE
#define HASH_	LS(DLLR_)
#define QUOT_	N1
#define LGLM_	N2
#define RGLM_	N3
#define LT_		RA(LGLM_)
#define GT_		RA(RGLM_)
#define LPAR_	N4
#define RPAR_	N5
#define LBRK_	RA(LPAR_)
#define RBRK_	RA(RPAR_)
#define AT_		N6
#define PLUS_	N7
#define MIN_	N8
#define FSLA_	N9
#define STAR_	N0
#define EQUL_	MINUS
#define PCNT_	EQUAL

#define MDSH_	RA(N8)
#define NDSH_	RA(N1)

#define NBSP_	LS(SPACE)

#define N0_	LS(N0)
#define N1_	LS(N1)
#define N2_	LS(N2)
#define N3_	LS(N3)
#define N4_	LS(N4)
#define N5_	LS(N5)
#define N6_	LS(N6)
#define N7_	LS(N7)
#define N8_	LS(N8)
#define N9_	LS(N9)

#define LT_TAPPING_TERM 250

&lt {
	tapping-term-ms = <LT_TAPPING_TERM>;
};

&sk {
	release-after-ms = <1000>;
};

&caps_word {
	continue-list = <ULIN_ MIN_ BACKSPACE Z_ W_ N_ M_ CCED_ G_ H_ F_>;
};

/ { 
	behaviors {
		hm: homerow_mods {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MODS";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <250>;
			quick-tap-ms = <0>;
			bindings = <&kp>, <&kp>;
		};
		
		hml: homerow_left {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_LEFT";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <300>;
			quick-tap-ms = <200>;
			hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;
			bindings = <&kp>, <&kp>;
		};
		
		hmr: homerow_right {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_RIGHT";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <300>;
			quick-tap-ms = <200>;
			hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
			bindings = <&kp>, <&kp>;
		};
		
		lttp: layer_toggle_tap_preferred {
			compatible = "zmk,behavior-hold-tap";
			label = "LAYER_TOGGLE_TAP_PREFERRED";
			#binding-cells = <2>;
			tapping-term-ms = <LT_TAPPING_TERM>;
			quick-tap-ms = <0>;
			flavor = "balanced";
			bindings = <&mo>, <&kp>;
		};
		
		lhs: layer_hold_or_sticky {
			compatible = "zmk,behavior-hold-tap";
			label = "HOLD_OR_STICKY";
			#binding-cells = <2>;
			tapping-term-ms = <300>;
			flavor = "balanced";
			bindings = <&mo>, <&tog>;
		};
	};

	
	macros {
		ZMK_MACRO(macro_qu,
			tap-ms = <30>;
			bindings
				= <&macro_tap &kp Q_ &kp U_>
				;
		)
		
		
		#define MACRO_DOUBLE(FIRST, SECOND) \
			ZMK_MACRO(dbl_##FIRST, \
				tap-ms = <30>; \
				bindings = <&macro_tap &kp FIRST &kp SECOND &kp LEFT>; \
				)
				
		MACRO_DOUBLE(LPAR_, RPAR_)
		MACRO_DOUBLE(LBRK_, RBRK_)
		MACRO_DOUBLE(LCRL_, RCRL_)
		MACRO_DOUBLE(LT_,   GT_)
		MACRO_DOUBLE(LGLM_, RGLM_)
		MACRO_DOUBLE(APST_, APST_)
		MACRO_DOUBLE(QUOT_, QUOT_)
		
		#define MACRO(FIRST, SECOND) \
			ZMK_MACRO(m_##FIRST##SECOND, \
				tap-ms = <30>; \
				bindings = <&macro_tap &kp FIRST &kp SECOND>; \
				)
	
		MACRO(ACUT_, A_)
		MACRO(ACUT_, E_)
		MACRO(ACUT_, I_)
		MACRO(ACUT_, O_)
		MACRO(ACUT_, U_)
		MACRO(CRAT_, A_)
		MACRO(CRAT_, E_)
		MACRO(CRAT_, O_)
		MACRO(GRAV_, A_)
		MACRO(GRAV_, E_)
		MACRO(TILD_, A_)
		MACRO(TILD_, O_)
	};

	/*
					KEY POSITIONS

	  ╭──────────────────────╮ ╭───────────────────────╮
	  │  0   1   2   3     4 │ │  5     6   7   8   9 │
	  │ 10  11  12  13    14 │ │ 15    16  17  18  19 │
	  │ 20  21  22  23    24 │ │ 25    26  27  28  29 │
	  ╰───────────╮ 30    31 │ │ 32    33 ╭───────────╯
				  ╰──────────╯ ╰──────────╯			*/
			  
	combos {
		compatible = "zmk,combos";
		
		#define COMBO_TIMEOUT 20
		
		combo_qu {
			bindings = <&macro_qu>;
			key-positions = <26 27>;
			timeout-ms = <COMBO_TIMEOUT>;
		};
		
		
		#define COMBO(KEY, POSITIONS, SUFFIX) \
			combo_##KEY##SUFFIX { \
				bindings = <&kp KEY>; \
				key-positions = <POSITIONS>; \
				timeout-ms = <COMBO_TIMEOUT>; \
			};
			
		/*
		#define COMBO_LAYER(KEY, POSITIONS, LAYERS) \
			combo_##KEY { \
				bindings = <&kp KEY>; \
				key-positions = <POSITIONS>; \
				layers = <LAYERS>;
				timeout-ms = <COMBO_TIMEOUT>; \
			};
			*/
			
			
		COMBO(TAB,   12 13,)
		COMBO(ENTER, 16 17,)
		COMBO(BSPC,  11 12,)
		COMBO(BSPC,  17 18,_)
		COMBO(SPACE, 11 12 13,)
		COMBO(SPACE, 16 17 18,_)
		COMBO(DEL,   21 22,)
		COMBO(DEL,   27 28,_)
		COMBO(ESC,   10 11 12 13,)
		COMBO(ESC,   22 23,_)
		COMBO(CAPS,  13 14,)
		
				
		combo_ctrl_z {
			bindings = <&kp LC(Z_)>;
			key-positions = <20 21>;
			timeout-ms = <COMBO_TIMEOUT>;
		};
		
		combo_pause {
			bindings = <&kp PAUSE_BREAK>;
			key-positions = <20 21 22 23>;
			layers = <BASE>;
			timeout-ms = <COMBO_TIMEOUT>;
		};
		
		combo_func_layer {
			bindings = <&mo FUNC>;
			key-positions = <30 31>;
			layers = <BASE>;
			timeout-ms = <COMBO_TIMEOUT>;
		};
		
		combo_cs_esc {
			bindings = <&kp LC(LS(ESC))>;
			key-positions = <10 11 12 13>;
			layers = <FUNC>;
			timeout-ms = <COMBO_TIMEOUT>;
		};
		
		combo_bootloader {
			bindings = <&bootloader>;
			key-positions = <20 24>;
			layers = <FUNC>;
			timeout-ms = <COMBO_TIMEOUT>;
		};
	};

	keymap {
		compatible = "zmk,keymap";
		
		#define PSBRK PAUSE_BREAK
		
		#define HMLG  &hm LGUI
		#define HMLA  &hm LALT
		#define HMLC  &hm LCTRL
		#define HMLS  &hml LSHIFT
		
		#define HMRG  &hm RGUI
		#define HMRA  &hm RALT
		#define HMRC  &hm RCTRL
		#define HMRS  &hmr RSHIFT
		
		#define DOT_COMMA	&mt DOT_  COMM_
		#define COLON_SEMI	&mt COLN_ SEMI_
		#define EXCL_QMRK	&mt EXCL_ QMRK_
		
		#define MTPAR  &mt RPAR_ LPAR_
		#define MTCRL  &mt RCRL_ LCRL_
		#define MTBRK  &mt RBRK_ LBRK_
		#define MTGLM  &mt RGLM_ LGLM_
		#define MTGLT  &mt GT_   LT_
		
		#define THUMB1	&lttp SYM E_
		#define THUMB2	&mo   NUM
		#define THUMB3	&lttp ACNT ACUT_
		#define THUMB4	&lt   NAV SPACE
		
		base_layer {
			bindings = <
				&kp  Z_		&kp EACT_	&kp  X_		&kp  Y_		&kp Q_				&kp K_		&kp  C_		&kp  H_		&kp  F_		&kp  J_
				HMRG U_		HMLA O_		HMLC I_		HMLS A_		&kp DOT_			&kp G_		HMRS T_		HMRC S_		HMRA R_		HMRG N_
				&kp  B_		HMLC W_		&kp  P_		DOT_COMMA	EXCL_QMRK			&key_repeat	&kp  D_		&kp  M_		&kp  L_		&kp  V_
													THUMB1		THUMB2				THUMB3		THUMB4
			>;
		};
		
		sym_layer {
			bindings = <
				&none		&none		&none		&none		&none				&kp AE_		&kp OE_		&kp AT_		&kp AMPR_	&kp CCED_
				MTGLM		&kp QUOT_	&kp APST_	&kp MIN_	COLON_SEMI			&kp CCED_	&kp CRAT_	&kp ACUT_	&kp GRAV_	&kp TILD_
				MTCRL		MTGLT		MTBRK		MTPAR		&none				&kp TRMA_	&none		&none		&kp MDSH_	&kp NDSH_
													&trans		&trans				&mo SDBL	&trans
			>;
		};
		
		symdouble_layer {
			bindings = <
				&none		&none		&none		&none		&none				&trans	&trans	&trans	&trans	&trans
				&dbl_LGLM_	&dbl_QUOT_	&dbl_APST_	&trans		&trans				&trans	&trans	&trans	&trans	&trans
				&dbl_LCRL_	&dbl_LT_	&dbl_LBRK_	&dbl_LPAR_	&none				&trans	&trans	&trans	&trans	&trans
													&trans		&trans				&trans	&trans
			>;
		};
		
		accent_layer {
			bindings = <
				&none		&m_GRAV_O_	&none		&m_GRAV_A_	&none				&none		&kp CCED_	&none		&none		&none
				&none		&m_TILD_O_	&none		&m_TILD_A_	&none				&kp TRMA_	&kp ACUT_	&kp CRAT_	&kp GRAV_	&kp TILD_
				&m_ACUT_U_	&m_ACUT_O_	&m_ACUT_I_	&m_ACUT_A_	&none				&none		&none		&none		&none		&none
													&m_CRAT_E	&m_GRAV_E			&trans		&trans
			>;
		};
		
		num_layer {
			bindings = <				
				&kp EQUL_	&kp N7_		&kp N8_		&kp N9_		&none				&none		&kp PCNT_	&kp HASH_	&kp DLLR_	&kp EURO_
				&kp N0_		&kp N1_		&kp N2_		&kp	N3_		DOT_COMMA			&none		&kp PLUS_	&kp MIN_	&kp STAR_	&kp FSLA_
				&none		&kp N4_		&kp N5_		&kp	N6_		&none				&none		MTPAR		MTGLT		&kp EQUL_	&kp BSLA_
													&tog NUM	&trans				&trans		&trans
			>;
		};
		
		nav_layer {
			bindings = <
				&kp INSERT	&sk RALT	&kp PSCRN	&kp PSBRK	&none				&kp PG_UP	&kp HOME		&kp LEFT	&kp RIGHT	&kp END
				&sk LGUI	&sk LALT	&sk LCTRL	&sk LSHIFT	&none				&kp PG_DN	&kp LC(LEFT)	&kp DOWN	&kp UP		&kp LC(RIGHT)
				&kp LC(Z_)	&kp LC(X_)	&kp LC(C_)	&kp LC(V_)	&none				&none		&kp LC(BSPC)	&kp BSPC	&kp DEL		&kp LC(DEL)
													&kp ULIN_	&trans				&trans		&trans
			>;
		};
		
		func_layer {
			bindings = <
				&bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3			&reset		  &kp F7  &kp F8  &kp F9  &kp F12
				&kp C_BRI_UP  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_MUTE    &kp LSLCK				&none		  &kp F1  &kp F2  &kp F3  &kp F11
				&kp C_BRI_DN  &kp C_PREV    &kp C_NEXT    &kp C_PP      &kp LNLCK				&out OUT_TOG  &kp F4  &kp F5  &kp F6  &kp F10
													      &trans		&trans					&trans		  &trans
			>;
		};
		/*
		none_layer {
			bindings = <
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none
			>;
		};
		*/
	};
};	
