#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#include "bepo_bindings.h"

/* SETTINGS */
#define MACRO_DELAY 5 /* max 10 */
#define COMBO_TIMEOUT 20 /* min 15 */
#define HT_TAPPING_TERM 250
#define HT_QUICK_TAP 200
#define LT_TAPPING_TERM 250
#define STICKY_KEY_RELEASE_DELAY 2000 /* min 1000 */

/* LAYERS */
#define BASE 0
#define CAPL 1
#define SYM  2
#define ACNT 3
#define NUM  4
#define NAV  5
#define FUNC 6
#define GAME 7

&lt {
	tapping-term-ms = <LT_TAPPING_TERM>;
	flavor = "balanced";
};

&mt {
	tapping-term-ms = <120>;
};

&sk {
	release-after-ms = <STICKY_KEY_RELEASE_DELAY>;
	quick-release;
};

/ { 
	behaviors {
		#define HOLDTAP_HEADER(NAME) \
			NAME: ht_##NAME { \
				label = #NAME; \
				compatible = "zmk,behavior-hold-tap"; \
				#binding-cells = <2>; \
				tapping-term-ms = <HT_TAPPING_TERM>; \
				quick-tap-ms = <HT_QUICK_TAP>;
				
		#define HOLDTAP(NAME, FLAVOR, BINDINGS...) \
				HOLDTAP_HEADER(NAME) \
				flavor = #FLAVOR; \
				bindings = BINDINGS; \
			};
			
		#define HRMOD_POS(NAME, POSITIONS) \
				HOLDTAP_HEADER(NAME) \
				flavor = "tap-preferred"; \
				bindings = <&kp>, <&kp>; \
				hold-trigger-key-positions = <POSITIONS>; \
			};
			
		/*mtslow: ht_mtslow {
			label = "mtslow";
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			tapping-term-ms = <200>;
			quick-tap-ms = <HT_QUICK_TAP>;
			flavor = "tap-preferred";
			bindings = <&kp>, <&kp>;
			};*/
			
		HOLDTAP(hm,       tap-preferred, <&kp>, <&kp>)
		//HOLDTAP(lhs,      balanced,      <&mo>, <&tog>)       // lhs: layer if held, toggle if pressed
		HOLDTAP(lsk,      balanced,      <&mo>, <&sk>)        // lsk: layer if held, one-shot kp if pressed
		HOLDTAP(lsl,      balanced,      <&mo>, <&sl>)        // lsl: layer if held, one-shot layer if pressed
		//HOLDTAP(lecflx,   balanced,      <&mo>, <&m_CFLX_E_>)
		//HOLDTAP(dot,      balanced,      <&m_dot_ns>, <&kp>)
		//HOLDTAP(comma,    balanced,      <&kp>, <&m_com_ns>)
		
		HRMOD_POS(hml, 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33)
		HRMOD_POS(hmr, 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31)
	};

	macros {
		#define MACRO(NAME, BINDINGS...) \
			ZMK_MACRO(m_##NAME, \
				tap-ms = <MACRO_DELAY>; \
				bindings = BINDINGS; \
				)
				
		/*#define MACRO_SIMPLE(FIRST, SECOND) \
			MACRO(FIRST##SECOND, <&macro_tap &kp FIRST &kp SECOND>)*/
				
		#define MACRO_SIMPLE(FIRST, SECOND) \
			ZMK_MACRO(m_##FIRST##SECOND, \
				tap-ms = <MACRO_DELAY>; \
				bindings = <&macro_tap &kp FIRST &kp SECOND>; \
				)
	
		MACRO_SIMPLE(ACUT_, A_)
		MACRO_SIMPLE(ACUT_, E_)
		MACRO_SIMPLE(ACUT_, I_)
		MACRO_SIMPLE(ACUT_, O_)
		MACRO_SIMPLE(ACUT_, U_)
		MACRO_SIMPLE(CFLX_, A_)
		MACRO_SIMPLE(CFLX_, E_)
		MACRO_SIMPLE(CFLX_, I_)
		MACRO_SIMPLE(CFLX_, O_)
		MACRO_SIMPLE(CFLX_, U_)
		MACRO_SIMPLE(GRAV_, E_)
		MACRO_SIMPLE(GRAV_, O_)
		MACRO_SIMPLE(GRAV_, U_)
		MACRO_SIMPLE(TILD_, A_)
		MACRO_SIMPLE(TILD_, O_)
		MACRO_SIMPLE(TILD_, N_)
		MACRO_SIMPLE(TRMA_, I_)
		MACRO_SIMPLE(B_, J_)
		
		MACRO(qu, <&macro_tap &kp Q_ &kp U_>)
		MACRO(ae, <&macro_tap &kp TILD_ &kp A_ &kp E_>)
		MACRO(ao, <&macro_tap &kp TILD_ &kp A_ &kp O_>)
		MACRO(oe, <&macro_tap &kp TILD_ &kp O_ &kp E_>)
		
		MACRO(squ, <&macro_press &kp LSHFT>, <&macro_tap &kp Q_ &kp U_>, <&macro_release &kp LSHFT>)
		MACRO(sae, <&macro_tap &kp TILD_>, <&macro_press &kp LSHFT>, <&macro_tap &kp A_ &kp E_>, <&macro_release &kp LSHFT>)
		MACRO(sao, <&macro_tap &kp TILD_>, <&macro_press &kp LSHFT>, <&macro_tap &kp A_ &kp O_>, <&macro_release &kp LSHFT>)
		MACRO(soe, <&macro_tap &kp TILD_>, <&macro_press &kp LSHFT>, <&macro_tap &kp O_ &kp E_>, <&macro_release &kp LSHFT>)
		
		//MACRO(dot_ns, <&macro_tap &kp DOT_>,  <&macro_release &kp LSHIFT &kp RSHIFT>, <&macro_tap &kp SPACE &sk LSHIFT>)
		MACRO(sposs,  <&macro_tap &kp SPACE &sk LSHIFT>)
		MACRO(spcap,  <&macro_tap &kp SPACE &tog CAPL>)
	};
			  
	combos {
		compatible = "zmk,combos";
		
		#define COMBO_HEADER(NAME, POSITIONS) \
			combo_##NAME { \
				key-positions = <POSITIONS>; \
				timeout-ms = <COMBO_TIMEOUT>; \
		
		#define COMBO(BINDINGS, POSITIONS, NAME) \
			COMBO_HEADER(NAME, POSITIONS) \
				bindings = <BINDINGS>; \
			};
		
		// #define COMBO_LAYER(BINDINGS, POSITIONS, LAYERS, NAME) \
			// COMBO_HEADER(NAME, POSITIONS) \
				// bindings = <BINDINGS>; \
			// };
		
		#define COMBO_KP(KEY, SUFFIX, POSITIONS) \
			COMBO_HEADER(KEY##SUFFIX, POSITIONS) \
				bindings = <&kp KEY>; \
			};
			
		#define COMBO_KP_LAYER(KEY, POSITIONS, LAYERS) \
			COMBO_HEADER(KEY, POSITIONS) \
				bindings = <&kp KEY>; \
				layers = <LAYERS>; \
			};
		
		#define COMBO_MACRO(MACRO, POSITIONS) \
			COMBO_HEADER(MACRO, POSITIONS) \
				bindings = <&m_##MACRO>; \
			};
		
		#define COMBO_MACRO_LAYER(MACRO, POSITIONS, LAYERS) \
			COMBO_HEADER(MACRO, POSITIONS) \
				bindings = <&m_##MACRO>; \
				layers = <LAYERS>; \
			};
		
			
	/*
	    0   1   2   3      4 | 5      6   7   8   9
	    10  11  12  13    14 | 15    16  17  18  19
	    20  21  22  23    24 | 25    26  27  28  29
	                30    31 | 32    33
	*/
	
		COMBO_KP(TAB,,    12 13)
		COMBO_KP(ENTER,,  16 17)
		COMBO_KP(SPACE,l, 11 12 13)
		COMBO_KP(SPACE,r, 16 17 18)
		
		COMBO_KP(BSPC,, 11 12)
		COMBO_KP(DEL,,  21 22)
		COMBO(&kp LC(BSPC), 17 18, cbsp)
		COMBO(&kp LC(DEL),  27 28, cdel)
		
		COMBO(&lsk FUNC LSHIFT, 30 31, l_oss_func)
		COMBO(&sk RSHIFT,       32 33, r_oss)
		
		COMBO_KP(ESC,,  10 11)
		COMBO_KP(CAPS,, 16 19)
		
		COMBO_MACRO_LAYER(qu, 26 27, BASE)
		COMBO_MACRO_LAYER(ae, 13 30, BASE)
		COMBO_MACRO_LAYER(ao, 13 11, BASE)
		COMBO_MACRO_LAYER(oe, 11 30, BASE)
		
		COMBO_MACRO_LAYER(squ, 26 27, CAPL)
		COMBO_MACRO_LAYER(sae, 13 30, CAPL)
		COMBO_MACRO_LAYER(sao, 13 11, CAPL)
		COMBO_MACRO_LAYER(soe, 11 30, CAPL)
		
		/*combo_sposs {
			bindings = <&m_sposs>;
			key-positions = <32 33>;
			layers = <BASE>;
			timeout-ms = <COMBO_TIMEOUT>;
		};
		
		combo_spcap {
			bindings = <&m_spcap>;
			key-positions = <32 33>;
			layers = <CAPL>;
			timeout-ms = <COMBO_TIMEOUT>;
		};*/
		
		/*combo_l_osshift_func {
			bindings = <&lsk FUNC LSHIFT>;
			key-positions = <30 31>;
			timeout-ms = <COMBO_TIMEOUT>;
		};
		
		combo_r_osshift {
			bindings = <&sk RSHIFT>;
			key-positions = <32 33>;
			timeout-ms = <COMBO_TIMEOUT>;
		};*/
		
		combo_ctrl_z {
			bindings = <&kp LC(Z_)>;
			key-positions = <20 21>;
			timeout-ms = <COMBO_TIMEOUT>;
		};
		
		combo_reset_left {
			bindings = <&reset>;
			key-positions = <0 4>;
			layers = <FUNC>;
			timeout-ms = <COMBO_TIMEOUT>;
		};
		
		combo_bootloader {
			bindings = <&bootloader>;
			key-positions = <20 24>;
			layers = <FUNC>;
			timeout-ms = <COMBO_TIMEOUT>;
		};
		
		combo_caps_layer {
			bindings = <&tog CAPL>;
			key-positions = <10 13>;
			layers = <BASE CAPL>;
			timeout-ms = <COMBO_TIMEOUT>;
		};
		
		combo_game_layer {
			bindings = <&tog GAME>;
			key-positions = <0 1 2>;
			layers = <FUNC>;
			timeout-ms = <COMBO_TIMEOUT>;
		};
	};

	keymap {
		compatible = "zmk,keymap";
		
		#define HMLS  &hml LSHIFT
		#define HMRS  &hmr RSHIFT
		#define HMLC  &hm LCTRL
		#define HMRC  &hm RCTRL
		#define HMLA  &hm LALT
		#define HMRA  &hm RALT
		#define HMLG  &hm LGUI
		#define HMRG  &hm RGUI
		
		#define EXCL_QMRK	&mt EXCL_ QMRK_
		
		/*#define COMMA__		&comma COMM_ 0
		#define DOT__		&dot 0 DOT_	*/
		
		#define MTPAR  &mt RPAR_ LPAR_
		/*#define MTCRL  &mt RCRL_ LCRL_
		#define MTBRK  &mt RBRK_ LBRK_
		#define MTGLM  &mt RGLM_ LGLM_*/
		#define MTGLT  &mt GT_   LT_
		
		/*#define MTDASH  &mtslow NDSH_ MDSH_*/
		#define MTCASH  &mt EURO_ DLLR_
		
		#define THUMB1	&lt NUM E_
		#define THUMB1S	&lt NUM LS(E_)
		#define THUMB2	&lsl SYM SYM
		#define THUMB3	&lsl ACNT ACNT
		#define THUMB4	&lt NAV SPACE
		
		base_layer {
			bindings = <
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none
			>;
		};
		
		caps_layer {
			bindings = <
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none
			>;
		};
		
		sym_layer {
			bindings = <
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none
			>;
		};
		
		accent_layer {
			bindings = <
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none
			>;
		};
		
		num_layer {
			bindings = <
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none
			>;
		};
		
		nav_layer {
			bindings = <
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none
			>;
		};
		
		func_layer {
			bindings = <
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none
			>;
		};
		
		game_layer {
			bindings = <
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none
			>;
		};
		/* FOR DEBUGGING:
			bindings = <
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none &none &none &none &none &none &none
				&none &none &none &none
			>;
		*/
	};
};	
