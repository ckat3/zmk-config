#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define SYM  1
#define NUM  2
#define NAV  3
#define FUNC 4

#define B		Q
#define EACT	W
#define P		E
#define O		R
#define EGRV	T
#define CRAT	Y
#define V		U
#define D		I
#define L		O
#define J		P
#define Z		LBKT
#define W		RBKT

#define A		A
#define U		S
#define I		D
#define E		F
#define COMM	G
#define C		H
#define T		J
#define S		K
#define R		L
#define N		SEMI
#define M		APOSTROPHE
#define CCED	BACKSLASH

#define AGRV	Z
#define Y		X
#define X		C
#define DOT	V
#define K		B
/* #define APST	N */
#define APST	RA(COMM)
#define Q		M
#define G		COMMA
#define H		DOT
#define F		SLASH

#define EXCL	LS(CRAT)
#define SEMI	LS(COMM)
#define COLN	LS(DOT)
#define QMRK	LS(APST)

#define ACUT	RA(EACT)
#define GRAV	RA(EGRV)
#define TILD	RA(N)
#define AMPR	RA(P)
#define OE	RA(O)

#define AE	RA(A)
#define TRMA	RA(U)
#define EURO	RA(E)
#define BSLA	RA(AGRV)
#define LCRL	RA(Y)
#define RCRL	RA(X)
#define ULIN	RA(SPACE)

#define DLLR	GRAVE
#define HASH	LS(DLLR)
#define QUOT	N1
#define LGLM	N2
#define RGLM	N3
#define LT	RA(LGLM)
#define GT	RA(RGLM)
#define LPAR	N4
#define RPAR	N5
#define LBRK	RA(LPAR)
#define RBRK	RA(RPAR)
#define AT	N6
#define PLUS	N7
#define MIN	N8
#define FSLA	N9
#define STAR	N0
#define EQUL	MINUS
#define PCNT	EQUAL

#define MDSH	RA(N8)
#define NDSH	RA(N1)

#define NBSP	LS(SPACE)

#define N0	LS(N0)
#define N1	LS(N1)
#define N2	LS(N2)
#define N3	LS(N3)
#define N4	LS(N4)
#define N5	LS(N5)
#define N6	LS(N6)
#define N7	LS(N7)
#define N8	LS(N8)
#define N9	LS(N9)

&sk {
	release-after-ms = <2000>;
};

&caps_word {
	continue-list = <ULIN MIN BACKSPACE>;
};

/ { 
	behaviors {
		hm: homerow_mods {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MODS";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <250>;
			quick-tap-ms = <0>;
			bindings = <&kp>, <&kp>;
		};
		
		hml: homerow_left {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_LEFT";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <300>;
			quick-tap-ms = <200>;
			hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;
			bindings = <&kp>, <&kp>;
		};
		
		hmr: homerow_right {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_RIGHT";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <300>;
			quick-tap-ms = <200>;
			hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
			bindings = <&kp>, <&kp>;
		};
		
		lttp: layer_toggle_tap_preferred {
			compatible = "zmk,behavior-hold-tap";
			label = "LAYER_TOGGLE_TAP_PREFERRED";
			#binding-cells = <2>;
			tapping-term-ms = <150>;
			quick-tap-ms = <0>;
			flavor = "tap-preferred";
			bindings = <&mo>, <&kp>;
		};
	};



/*
                KEY POSITIONS

  ╭────────────────────╮ ╭────────────────────╮
  │  0   1   2   3   4 │ │  5   6   7   8   9 │
  │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
  │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
  ╰───────────╮ 30  31 │ │ 32  33 ╭───────────╯
              ╰────────╯ ╰────────╯            */
			  
    combos {
        compatible = "zmk,combos";
		
		combo_enter {
			bindings = <&kp ENTER>;
			key-positions = <16 17>;
		};
		
		combo_backspace_l {
			bindings = <&kp BACKSPACE>;
			key-positions = <11 12>;
		};
		
		combo_backspace_r {
			bindings = <&kp BACKSPACE>;
			key-positions = <17 18>;
		};
		
		combo_space_r {
			bindings = <&kp SPACE>;
			key-positions = <16 17 18>;
		};
		
		combo_space_l {
			bindings = <&kp SPACE>;
			key-positions = <11 12 13>;
		};
		
		combo_delete {
			bindings = <&kp DELETE>;
			key-positions = <18 19>;
		};
				
		combo_tab {
			bindings = <&kp TAB>;
			key-positions = <12 13>;
		};
		
		combo_esc {
			bindings = <&kp ESC>;
			key-positions = <10 11 12 13>;
		};
		
		combo_func_layer {
			bindings = <&mo FUNC>;
			key-positions = <30 31>;
			layers = <BASE>;
		};
        
		combo_caps {
			bindings = <&kp CAPS>;
			key-positions = <13 14>;
			layers = <NAV>;
		};
		
		combo_bootloader {
			bindings = <&bootloader>;
			key-positions = <20 24>;
			layers = <FUNC>;
		};
    };

	keymap {
		compatible = "zmk,keymap";

		#define THUMB1		&sl SYM
		#define THUMB2		&lttp NUM E
		#define THUMB3		&lt NAV SPACE
		#define THUMB4		&mt LSHIFT BSPC
		
		#define DOT_COMMA	&mt DOT COMM
		#define COLON_SEMI	&mt COLN SEMI
		#define EXCL_QMRK	&mt EXCL QMRK
		
		#define PSBRK PAUSE_BREAK
		
		#define HMLG &hm LGUI
		#define HMLA &hm LALT
		#define HMLC &hm LCTRL
		#define HMLS &hml LSHIFT
		
		#define HMRG &hm RGUI
		#define HMRA &hm RALT
		#define HMRC &hm RCTRL
		#define HMRS &hmr RSHIFT
		
		base_layer {
			bindings = <
				&kp B		&kp EACT	&kp P		&kp O		EXCL_QMRK			&none		&kp V		&kp D		&kp L		&kp C
				&kp W		HMLA U	HMLC I	HMLS A	DOT_COMMA			&kp J		HMRS T	HMRC S	HMRA R	&kp N
				&kp Z		HMLC Y	&kp X		&kp Q		&kp K				&key_repeat	&kp M		&kp G		&kp H		&kp F
												/*	SYM 		NUM E				NAV SPACE	LSHIFT BSPC	*/
													THUMB1		THUMB2				THUMB3		THUMB4
			>;
			
		};
		
		sym_layer {
			bindings = <
				&kp LBRK	&kp RBRK	&kp LGLM	&kp RGLM	&none				&kp AE	&kp OE	&kp AT	&kp AMPR	&none
				&kp LPAR	&kp RPAR	&kp QUOT	&kp APST	COLON_SEMI			&kp CCED	&kp ACUT	&kp GRAV	&kp CRAT	&kp TILD
				&kp LCRL	&kp RCRL	&kp LT	&kp GT	&none				&kp TRMA	&kp MIN	&kp MDSH	&kp NDSH	&none
													&trans		&trans				&trans		&kp NBSP
			>;
		};
		
		num_layer {
			bindings = <
				&kp PCNT	&kp HASH	&kp DLLR	&kp EURO	&none				&none		&kp N4	&kp N5	&kp N6	&none
				&kp FSLA	&kp STAR	&kp MIN	&kp PLUS	DOT_COMMA			&none		&kp N1	&kp N2	&kp N3	&kp N0
				&kp BSLA	&kp EQUL	&kp LA(TAB)	&kp LC(TAB)	&none				&none		&kp N7	&kp N8	&kp N9	&tog NUM
													&trans		&tog NUM			&trans		&trans
			>;
		};
		
		nav_layer {
			bindings = <
				&kp INSERT	&sk RALT	&kp PSCRN	&kp PSBRK	&none				&kp PG_UP	&kp HOME		&kp LEFT	&kp RIGHT	&kp END
				&sk LGUI	&sk LALT	&sk LCTRL	&sk LSHIFT	&caps_word			&kp PG_DN	&kp LC(LEFT)	&kp DOWN	&kp UP		&kp LC(RIGHT)
				&kp LC(Z)	&kp LC(X)	&kp LC(C)	&kp LC(V)	&none				&none		&kp LC(BSPC)	&kp BSPC	&kp DEL		&kp LC(DEL)
													&kp LC(RET)	&kp ULIN			&trans		&trans
			>;
		};
		
		func_layer {
			bindings = <
				&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2	&bt BT_SEL 3			&reset  &kp F4  &kp F5  &kp F6  &kp F10
				&kp C_VOL_DN &kp C_VOL_UP  &kp C_MUTE    &kp C_BRI_UP	&kp LSLCK				&none   &kp F1  &kp F2  &kp F3  &kp F11
				&kp C_PREV   &kp C_NEXT    &kp C_PP      &kp C_BRI_DN	&kp LNLCK				&none   &kp F7  &kp F8  &kp F9  &kp F12
														 &trans			&trans					&trans	&trans
			>;
		};
	};
};	
