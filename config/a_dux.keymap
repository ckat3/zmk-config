#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define SYM  1
#define NUM  2
#define NAV  3
#define FUNC 4

#define _B		Q
#define _EACT	W
#define _P		E
#define _O		R
#define _EGRV	T
#define _CRAT	Y
#define _V		U
#define _D		I
#define _L		O
#define _J		P
#define _Z		LBKT
#define _W		RBKT

#define _A		A
#define _U		S
#define _I		D
#define _E		F
#define _COMM	G
#define _C		H
#define _T		J
#define _S		K
#define _R		L
#define _N		SEMI
#define _M		APOSTROPHE
#define _CCED	BACKSLASH

#define _AGRV	Z
#define _Y		X
#define _X		C
#define _DOT	V
#define _K		B
/* #define _APST	N */
#define _APST	RA(_COMM)
#define _Q		M
#define _G		COMMA
#define _H		DOT
#define _F		SLASH

#define _EXCL	LS(_CRAT)
#define _SEMI	LS(_COMM)
#define _COLN	LS(_DOT)
#define _QMRK	LS(_APST)

#define _ACUT	RA(_EACT)
#define _GRAV	RA(_EGRV)
#define _TILD	RA(_N)
#define _AMPR	RA(_P)
#define _OE	RA(_O)

#define _AE	RA(_A)
#define _TRMA	RA(_U)
#define _EURO	RA(_E)
#define _BSLA	RA(_AGRV)
#define _LCRL	RA(_Y)
#define _RCRL	RA(_X)
#define _ULIN	RA(SPACE)

#define _DLLR	GRAVE
#define _HASH	LS(_DLLR)
#define _QUOT	N1
#define _LGLM	N2
#define _RGLM	N3
#define _LT	RA(_LGLM)
#define _GT	RA(_RGLM)
#define _LPAR	N4
#define _RPAR	N5
#define _LBRK	RA(_LPAR)
#define _RBRK	RA(_RPAR)
#define _AT	N6
#define _PLUS	N7
#define _MIN	N8
#define _FSLA	N9
#define _STAR	N0
#define _EQUL	MINUS
#define _PCNT	EQUAL

#define _MDSH	RA(N8)
#define _NDSH	RA(N1)

#define _NBSP	LS(SPACE)

#define _N0	LS(N0)
#define _N1	LS(N1)
#define _N2	LS(N2)
#define _N3	LS(N3)
#define _N4	LS(N4)
#define _N5	LS(N5)
#define _N6	LS(N6)
#define _N7	LS(N7)
#define _N8	LS(N8)
#define _N9	LS(N9)

&sk {
	release-after-ms = <2000>;
};

&caps_word {
	continue-list = <_ULIN _MIN BACKSPACE>;
};

/ { 
	behaviors {
		hm: homerow_mods {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MODS";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <250>;
			quick-tap-ms = <0>;
			bindings = <&kp>, <&kp>;
		};
		
		hml: homerow_left {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_LEFT";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <300>;
			quick-tap-ms = <200>;
			hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;
			bindings = <&kp>, <&kp>;
		};
		
		hmr: homerow_right {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_RIGHT";
			#binding-cells = <2>;
			flavor = "balanced";
			tapping-term-ms = <300>;
			quick-tap-ms = <200>;
			hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
			bindings = <&kp>, <&kp>;
		};
		
		lttp: layer_toggle_tap_preferred {
			compatible = "zmk,behavior-hold-tap";
			label = "LAYER_TOGGLE_TAP_PREFERRED";
			#binding-cells = <2>;
			tapping-term-ms = <150>;
			quick-tap-ms = <0>;
			flavor = "tap-preferred";
			bindings = <&mo>, <&kp>;
		};
	};



/*
                KEY POSITIONS

  ╭────────────────────╮ ╭────────────────────╮
  │  0   1   2   3   4 │ │  5   6   7   8   9 │
  │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
  │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
  ╰───────────╮ 30  31 │ │ 32  33 ╭───────────╯
              ╰────────╯ ╰────────╯            */
			  
    combos {
        compatible = "zmk,combos";
		
		combo_enter {
			bindings = <&kp ENTER>;
			key-positions = <16 17>;
		};
		
		combo_backspace_l {
			bindings = <&kp BACKSPACE>;
			key-positions = <11 12>;
		};
		
		combo_backspace_r {
			bindings = <&kp BACKSPACE>;
			key-positions = <17 18>;
		};
		
		combo_space_r {
			bindings = <&kp SPACE>;
			key-positions = <16 17 18>;
		};
		
		combo_space_l {
			bindings = <&kp SPACE>;
			key-positions = <11 12 13>;
		};
		
		combo_delete {
			bindings = <&kp DELETE>;
			key-positions = <18 19>;
		};
				
		combo_tab {
			bindings = <&kp TAB>;
			key-positions = <12 13>;
		};
		
		combo_esc {
			bindings = <&kp ESC>;
			key-positions = <10 11 12 13>;
		};
		
		combo_func_layer {
			bindings = <&mo FUNC>;
			key-positions = <30 31>;
			layers = <BASE>;
		};
        
		combo_caps {
			bindings = <&kp CAPS>;
			key-positions = <13 14>;
			layers = <NAV>;
		};
		
		combo_bootloader {
			bindings = <&bootloader>;
			key-positions = <20 24>;
			layers = <FUNC>;
		};
    };

	keymap {
		compatible = "zmk,keymap";

		#define THUMB1		&sl SYM
		#define THUMB2		&lttp NUM _E
		#define THUMB3		&lt NAV SPACE
		#define THUMB4		&mt LSHIFT BSPC
		
		#define DOT_COMMA	&mt _DOT _COMM
		#define COLON_SEMI	&mt _COLN _SEMI
		#define EXCL_QMRK	&mt _EXCL _QMRK
		
		#define PSBRK PAUSE_BREAK
		
		#define HMLG &hm LGUI
		#define HMLA &hm LALT
		#define HMLC &hm LCTRL
		#define HMLS &hml LSHIFT
		
		#define HMRG &hm RGUI
		#define HMRA &hm RALT
		#define HMRC &hm RCTRL
		#define HMRS &hmr RSHIFT
		
		base_layer {
			bindings = <
				&kp _B		&kp _EACT	&kp _P		&kp _O		EXCL_QMRK			&none		&kp _V		&kp _D		&kp _L		&kp _C
				&kp _W		HMLA _U	HMLC _I	HMLS _A	DOT_COMMA			&kp _J		HMRS _T	HMRC _S	HMRA _R	&kp _N
				&kp _Z		HMLC _Y	&kp _X		&kp _Q		&kp _K				&key_repeat	&kp _M		&kp _G		&kp _H		&kp _F
												/*	SYM 		NUM E				NAV SPACE	LSHIFT BSPC	*/
													THUMB1		THUMB2				THUMB3		THUMB4
			>;
			
		};
		
		sym_layer {
			bindings = <
				&kp _LBRK	&kp _RBRK	&kp _LGLM	&kp _RGLM	&none				&kp _AE	&kp _OE	&kp _AT	&kp _AMPR	&none
				&kp _LPAR	&kp _RPAR	&kp _QUOT	&kp _APST	COLON_SEMI			&kp _CCED	&kp _ACUT	&kp _GRAV	&kp _CRAT	&kp _TILD
				&kp _LCRL	&kp _RCRL	&kp _LT	&kp _GT	&none				&kp _TRMA	&kp _MIN	&kp _MDSH	&kp _NDSH	&none
													&trans		&trans				&trans		&kp _NBSP
			>;
		};
		
		num_layer {
			bindings = <
				&kp _PCNT	&kp _HASH	&kp _DLLR	&kp _EURO	&none				&none		&kp _N4	&kp _N5	&kp _N6	&none
				&kp _FSLA	&kp _STAR	&kp _MIN	&kp _PLUS	DOT_COMMA			&none		&kp _N1	&kp _N2	&kp _N3	&kp _N0
				&kp _BSLA	&kp _EQUL	&kp LA(TAB)	&kp LC(TAB)	&none				&none		&kp _N7	&kp _N8	&kp _N9	&tog NUM
													&trans		&tog NUM			&trans		&trans
			>;
		};
		
		nav_layer {
			bindings = <
				&kp INSERT	&sk RALT	&kp PSCRN	&kp PSBRK	&none				&kp PG_UP	&kp HOME		&kp LEFT	&kp RIGHT	&kp END
				&sk LGUI	&sk LALT	&sk LCTRL	&sk LSHIFT	&caps_word			&kp PG_DN	&kp LC(LEFT)	&kp DOWN	&kp UP		&kp LC(RIGHT)
				&kp LC(_Z)	&kp LC(_X)	&kp LC(_C)	&kp LC(_V)	&none				&none		&kp LC(BSPC)	&kp BSPC	&kp DEL		&kp LC(DEL)
													&kp LC(RET)	&kp _ULIN			&trans		&trans
			>;
		};
		
		func_layer {
			bindings = <
				&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2	&bt BT_SEL 3			&reset  &kp F4  &kp F5  &kp F6  &kp F10
				&kp C_VOL_DN &kp C_VOL_UP  &kp C_MUTE    &kp C_BRI_UP	&kp LSLCK				&none   &kp F1  &kp F2  &kp F3  &kp F11
				&kp C_PREV   &kp C_NEXT    &kp C_PP      &kp C_BRI_DN	&kp LNLCK				&none   &kp F7  &kp F8  &kp F9  &kp F12
														 &trans			&trans					&trans	&trans
			>;
		};
	};
};	
